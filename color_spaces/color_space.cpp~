/*
 * Diarmid Flatley
 * MAT 201B
 * 2018/01/29
 *
 * This was working, but now crashes with a segmentation fault. I dont know what's wrong.
 *
 * Pressing Keys 1,2,3 or 4 should change the vertex mapping
 */

/*:
  This example shows how to use Image, Array and Texture to read a .jpg file,
display it as an OpenGL texture and print the pixel values on the command line.
Notice that while the intput image has only 4 pixels, the rendered texture is
smooth.  This is because interpolation is done on the GPU.

  Karl Yerkes and Matt Wright (2011/10/10)
*/

#include <cassert>
#include <iostream>
#include "allocore/io/al_App.hpp"
using namespace al;
using namespace std;

class MyApp : public App {
public:

  Image image;
  Mesh mesh;
  int input;

  MyApp() {

    // Load a .jpg file
    const char *filename = "mat201b/color_spaces/double-rainbow.jpg";

    if (image.load(filename)) {
      printf("Read image from %s\n", filename);
    } else {
      printf("Failed to read image from %s!  Quitting.\n", filename);
      exit(-1);
    }
  };

  void onKeyDown(const Keyboard &k) {
           input = k.key();
          cout << input  << endl;
  };

  void onAnimate(double dt) {
        
    Array& array(image.array());
   
    assert(array.type() == AlloUInt8Ty);

    Image::RGBAPix<uint8_t> pixel;
   
    mesh.primitive(Graphics::POINTS);
    mesh.stroke(1);
  
    mesh.reset();
   
    if (input == 49) {
        for (size_t row = 0; row < array.height(); ++row) {
          for (size_t col = 0; col < array.width(); ++col) {
            mesh.vertex(col,row,0);
            array.read(&pixel.r, col, row);
            mesh.color(float((int)pixel.r/255.0f), float((int)pixel.g/255.0f), float((int)pixel.b/255.0f));
          }
        }
      input = -1;  
      }

    else if (input == 50) {  
        for (size_t row = 0; row < array.height(); ++row) {
          for (size_t col = 0; col < array.width(); ++col) { 
            // RGB Cube
            array.read(&pixel.r, col, row);
            mesh.vertex((int)pixel.r, (int)pixel.g, (int)pixel.b);
            mesh.color(float((int)pixel.r/255.0f), float((int)pixel.g/255.0f), float((int)pixel.b/255.0f));   
          }
        }
        input = -1;
      }
    else if (input == 51) {
         for (size_t row = 0; row < array.height(); ++row) {
           for (size_t col = 0; col < array.width(); ++col) {        
             Color original;
             HSV convert; 
             array.read(&pixel.r,col, row);
             original = RGB(float((int)pixel.r/255.0f), float((int)pixel.g/255.0f), float((int)pixel.b/255.0f));
             convert = HSV(original);
             mesh.vertex(convert.h*255,convert.s*255,convert.v*255);
             mesh.color(float((int)pixel.r/255.0f), float((int)pixel.g/255.0f), float((int)pixel.b/255.0f));
           }   
         }
         input = -1;
       }
    else if (input == 52) {
         for (size_t row = 0; row < array.height(); ++row) {
           for (size_t col = 0; col < array.width(); ++col) {
             array.read(&pixel.r,col,row);
             mesh.vertex(rand() % 255, rand() % 255, rand() % 255); 
             mesh.color(float((int)pixel.r/255.0f), float((int)pixel.g/255.0f), float((int)pixel.b/255.0f));  
           }
         }
         input = -1;
       }            
  };

  void onDraw(Graphics& g) {
     g.pushMatrix();
     g.translate(-0.15,-0.15,-0.5);
     g.scale(0.001);
      g.draw(mesh);
     g.popMatrix();
  }
};

int main() {
  MyApp app;
  app.initWindow(Window::Dim(600, 400), "imageTexture");
  app.start();
}
